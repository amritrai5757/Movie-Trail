{"version":3,"sources":["requests.js","axios.js","Row.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAAMA,G,YAAS,oCAaAC,EAXC,CACZC,cAAc,8BAAD,OAA+BF,EAA/B,mBACbG,sBAAsB,wBAAD,OAAyBH,EAAzB,sBACrBI,cAAc,2BAAD,OAA4BJ,EAA5B,mBACbK,kBAAkB,2BAAD,OAA4BL,EAA5B,mBACjBM,kBAAkB,4BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,4BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,4BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA4BT,EAA5B,oB,sCCJPU,E,OAJCC,EAAMC,OAAO,CAC1BC,QAAQ,iC,wCCkEIC,MA7Df,YAA+C,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAC5B,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAmCF,mBAAS,IAA5C,mBAAOG,EAAP,KAAmBC,EAAnB,KAmCA,OAjCAC,qBAAU,WAAM,4CAEZ,4BAAAC,EAAA,sEAC0Bb,EAAMc,IAAIT,GADpC,cACUU,EADV,OAEIN,EAAUM,EAAQC,KAAKC,SAF3B,kBAGWF,GAHX,4CAFY,uBAAC,WAAD,wBAOZG,KACD,CAACb,IA0BA,sBAAKc,UAAU,MAAf,UACI,6BAAKf,IAEL,qBAAKe,UAAU,eAAf,SAGKX,EAAOY,KAAI,SAACC,GAAD,OACR,qBAEIC,QAAS,kBAxBT,SAACD,GACdX,EACCC,EAAc,IAEdY,KAAkB,OAALF,QAAK,IAALA,OAAA,EAAAA,EAAOG,OAAQ,IACvBC,MAAK,SAACC,GAEH,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnDnB,EAAcgB,EAAUb,IAAI,SAE/BiB,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAcTG,CAAYd,IACzBF,UAAS,sBAAiBb,GAAc,oBACxC8B,IAAG,UAnDV,wCAmDU,OACC9B,EAAWe,EAAMgB,YAAYhB,EAAMiB,eAEvCC,IAAKlB,EAAMG,MANNH,EAAMmB,SAUtB9B,GAAc,cAAC,IAAD,CAAS+B,QAAS/B,EAAYgC,KA1CzC,CACRC,OAAQ,MACRC,MAAM,OACNC,WAAY,CAERC,SAAU,U,MC8BPC,MApDf,WACI,IAiBkBC,EAAKC,EAjBvB,EAAyB1C,mBAAS,IAAlC,mBAAOc,EAAP,KAAc6B,EAAd,KAsBA,OApBAtC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC0Bb,EAAMc,IAAIxB,EAASE,uBAD7C,cACUuB,EADV,OAEImC,EACInC,EAAQC,KAAKC,QACTkC,KAAKC,MAAMD,KAAKE,SAAWtC,EAAQC,KAAKC,QAAQqC,OAAS,KAJrE,kBAOWvC,GAPX,4CADY,uBAAC,WAAD,wBAUZG,KACA,IAEJe,QAAQC,IAAIb,GAQR,yBAAQF,UAAU,SACdoC,MAAO,CACHC,eAAgB,QAChBC,gBAAgB,kEAAD,cAC4BpC,QAD5B,IAC4BA,OAD5B,EAC4BA,EAAOiB,cADnC,wBAGfoB,mBAAoB,iBAN5B,UASI,sBAAKvC,UAAU,mBAAf,UACI,oBAAIA,UAAU,gBAAd,UACU,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOjB,SAAP,OAAgBiB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOG,QAAvB,OAA+BH,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOsC,iBAE3C,sBAAKxC,UAAU,kBAAf,UACI,wBAAQA,UAAU,iBAAlB,kBACA,wBAAQA,UAAU,iBAAlB,wBAGJ,oBAAIA,UAAU,sBAAd,UAxBM6B,EAyBO,OAAC3B,QAAD,IAACA,OAAD,EAACA,EAAOuC,SAzBVX,EAyBmB,KAxB5B,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,QAASL,EAAGD,EAAIa,OAAO,EAAGZ,EAAE,GAAG,MAAQD,QA4B/C,qBAAK7B,UAAU,2B,MCfZ2C,MAlCf,WACI,MAAyBvD,oBAAS,GAAlC,mBAAOwD,EAAP,KAAaC,EAAb,KAeA,OAbApD,qBAAU,WAMN,OALAqD,OAAOC,iBAAiB,UAAU,WAC1BD,OAAOE,QAAU,IACjBH,GAAW,GACRA,GAAW,MAEf,WACHC,OAAOG,oBAAoB,aAGhC,IAIC,sBAAKjD,UAAS,cAAS4C,GAAQ,cAA/B,UACI,qBACI5C,UAAW,YACXiB,IAAI,4EACJG,IAAI,iBAGR,qBACIpB,UAAU,cACViB,IAAI,qJACJG,IAAI,qBCFL8B,MArBf,WACE,OACE,sBAAKlD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CACEf,MAAM,kCACNC,SAAUf,EAASC,cACnBe,YAAY,IAEd,cAAC,EAAD,CAAKF,MAAM,cAAcC,SAAUf,EAASG,gBAC5C,cAAC,EAAD,CAAKW,MAAM,eAAeC,SAAUf,EAASE,wBAC7C,cAAC,EAAD,CAAKY,MAAM,gBAAgBC,SAAUf,EAASI,oBAC9C,cAAC,EAAD,CAAKU,MAAM,iBAAiBC,SAAUf,EAASG,gBAC/C,cAAC,EAAD,CAAKW,MAAM,eAAeC,SAAUf,EAASQ,qBAC7C,cAAC,EAAD,CAAKM,MAAM,gBAAgBC,SAAUf,EAASI,wBCVrC4E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/C,MAAK,YAAkD,IAA/CgD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.14f74419.chunk.js","sourcesContent":["const API_KEY =\"0a55d3eec518d58edd48c26f654137c5\";\r\n\r\nconst requests ={\r\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated:`movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies:`/discover/movies?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies:`/discover/movies?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies:`/discover/movies?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests; ","import axios from \"axios\";\r\n\r\nconst instance =axios.create({\r\n   baseURL:\"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance;","import React,{ useState, useEffect } from 'react'\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl]= useState(\"\");\r\n\r\n    useEffect(() => {\r\n\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts= {\r\n        height: \"390\",\r\n        width:\"100%\",\r\n        playerVars: {\r\n            // https://developers.google.com/youtube/player_parameters\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if(trailerUrl){\r\n            setTrailerUrl(\"\");\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n                .then((url) => {\r\n                    //https://www.youtube.com/watch?v=XtMThy8QKqU\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get(\"v\"));\r\n                })\r\n                .catch((error) => console.log(error));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row__posters\">\r\n                {/*several row__posters(s) */}\r\n\r\n                {movies.map((movie)=> (\r\n                    <img\r\n                        key={movie.id}\r\n                        onClick={()=>handleClick(movie)}\r\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        src={`${base_url}${\r\n                            isLargeRow?movie.poster_path:movie.backdrop_path\r\n                        }`} \r\n                        alt={movie.name}\r\n                    />\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row;","import React, { useState, useEffect } from \"react\"\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner(){\r\n    const [movie, setMovie]= useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },  []);\r\n\r\n    console.log(movie);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n? str.substr(0, n-1)+\"...\" : str;\r\n    }\r\n\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url(\r\n                    \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                )`,\r\n                backgroundPosition: \"centre centre\",\r\n            }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n                \r\n                <h1 className=\"banner__description\">\r\n                    {truncate(movie?.overview,150)}\r\n                </h1>\r\n            </div>  \r\n\r\n            <div className=\"banner--fadeBottom\" />\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Banner","import React,{useState, useEffect}from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n    const [show, handleShow]=useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if (window.scrollY > 100){\r\n                handleShow(true);\r\n            } else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img\r\n                className =\"nav__logo\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n                alt=\"Netflix Logo\"\r\n            />\r\n\r\n            <img\r\n                className=\"nav__avatar\"\r\n                src=\"https://img.icons8.com/external-flatart-icons-lineal-color-flatarticons/64/000000/external-smiley-love-flatart-icons-lineal-color-flatarticons.png\"\r\n                alt=\"Netflix Logo\"\r\n            />\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav","import React from 'react';\nimport './App.css';\nimport requests from './requests';\nimport Row from \"./Row\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"Top picks by Amrit ❤❤\"\n        fetchUrl={requests.fetchTrending}\n        isLargeRow={true}\n      />\n      <Row title=\"Most Viewed\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchNetflixOriginals} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Documentries\" fetchUrl={requests.fetchDocumentaries} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchActionMovies} />\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}